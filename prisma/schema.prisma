model Payment {
  id        String   @id @default(uuid())
  groupId   String
  fromId    String
  toId      String
  amount    Float
  createdAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id])
  from      User     @relation("PaymentFrom", fields: [fromId], references: [id])
  to        User     @relation("PaymentTo", fields: [toId], references: [id])
}
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

model User {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  password       String
  groups         GroupMember[]
  expenses       Expense[]       @relation("UserExpenses")
  splits         ExpenseSplit[]  @relation("UserSplits")
  notifications  Notification[]  @relation("UserNotifications")
  paymentsFrom   Payment[]       @relation("PaymentFrom")
  paymentsTo     Payment[]       @relation("PaymentTo")
  createdAt      DateTime        @default(now())
}

model Group {
  id          String        @id @default(uuid())
  name        String
  description String?
  members     GroupMember[]
  expenses    Expense[]
  payments    Payment[]
  createdAt   DateTime      @default(now())
}

model GroupMember {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  role      String   @default("MEMBER")   // ADMIN ou MEMBER
  status    String   @default("PENDING")  // PENDING ou ACCEPTED
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
}

model Expense {
  id          String          @id @default(uuid())
  description String
  amount      Float
  paidById    String
  groupId     String
  paidBy      User            @relation("UserExpenses", fields: [paidById], references: [id])
  group       Group           @relation(fields: [groupId], references: [id])
  splits      ExpenseSplit[]  @relation("ExpenseSplits")
  createdAt   DateTime        @default(now())
}

model ExpenseSplit {
  id        String   @id @default(uuid())
  expenseId String
  userId    String
  amount    Float
  expense   Expense  @relation("ExpenseSplits", fields: [expenseId], references: [id])
  user      User     @relation("UserSplits", fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
}